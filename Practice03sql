
/*
문제1.
직원들의 사번(employee_id), 이름(firt_name), 성(last_name)과 부서명(department_name)을
조회하여 부서이름(department_name) 오름차순, 사번(employee_id) 내림차순 으로 정렬하세
요.
(106건)
*/
desc employees;
desc departments;
--중복-> DEPARTMENT_ID
SELECT department_name 부서이름, employee_id 사번
FROM EMPLOYEES EMP, DEPARTMENTS DEPT
WHERE EMP.department_id = dept.department_id
ORDER BY 부서이름 ,사번 DESC;


/*문제2.
employees 테이블의 job_id는 현재의 업무아이디를 가지고 있습니다.
직원들의 사번(employee_id), 이름(firt_name), 급여(salary), 부서명(department_name), 현
재업무(job_title)를 사번(employee_id) 오름차순 으로 정렬하세요.
부서가 없는 Kimberely(사번 178)은 표시하지 않습니다.
(106건)
*/
desc employees;
desc departments;
desc jobs;

SELECT employee_id 사번, first_name 이름, salary 급여, 
        DEPT.department_name 부서명, 
        J.job_title 현재업무
FROM employees EMP JOIN departments DEPT 
     ON EMP.department_id = DEPT.department_id
        JOIN jobs J     --> 조인 추가!
        ON EMP.job_id = J.job_id
WHERE EMP.salary BETWEEN J.min_salary AND J.max_salary --> between함수로 최고-최저사이의 샐러리값 출력 
ORDER BY 사번;


/*
문제2-1.
문제2에서 부서가 없는 Kimberely(사번 178)까지 표시해 보세요
(107건)
*/
select * from departments where department_id is null; --> null인값 없음
select * from employees where department_id is null; --> null인 값 kimberely 확인
--null이 있는 테이블에 (+) 해주고 출력

SELECT employee_id 사번, first_name 이름, salary 급여, 
        DEPT.department_name 부서명, 
        J.job_title 현재업무
FROM employees EMP LEFT OUTER JOIN departments DEPT 
     ON EMP.department_id = DEPT.department_id(+) -->NULL인 값에 (+)
         JOIN jobs J 
         ON EMP.job_id = J.job_id
WHERE EMP.salary BETWEEN J.min_salary AND J.max_salary --> between함수로 최고-최저사이의 샐러리값 출력 
ORDER BY 사번;


/*
문제3.
도시별로 위치한 부서들을 파악하려고 합니다.
도시아이디, 도시명, 부서명, 부서아이디를 도시아이디(오름차순)로 정렬하여 출력하세요
부서가 없는 도시는 표시하지 않습니다.
(27건)
*/
--locations;도시아이디, 도시명
--departments; --도시아이디, 부서명, 부서아이디 
desc locations; 
desc departments;  

SELECT L.location_id 도시아이디,
        city 도시명, Dept.department_name 부서명, Dept.department_id 부서아이디 
FROM locations L JOIN departments DEPT ON L.location_id = Dept.location_id
ORDER BY 도시아이디 ;
    
    
/*
문제3-1.
문제3에서 부서가 없는 도시도 표시합니다.
(43건)
*/
DESC LOCATIONS;
DESC DEPARTMENTS;

SELECT L.location_id 도시아이디,
        city 도시명, Dept.department_name 부서명, Dept.department_id 부서아이디 
FROM locations L LEFT OUTER JOIN departments DEPT 
    ON L.location_id = Dept.location_id(+) --43
ORDER BY 부서명 ;
    


/*
문제4.
지역(regions)에 속한 나라들을 지역이름(region_name), 나라이름(country_name)으로 출력하
되 지역이름(오름차순), 나라이름(내림차순) 으로 정렬하세요.
(25건)
*/
--REGIONS; 지역이름, 
--CONUNTRIES; 나라이름
DESC REGIONS; 
DESC COUNTRIES;

SELECT R.region_name AS 지역이름, 
       C.country_name AS 나라이름 
FROM regions R 
FULL OUTER JOIN countries C ON R.region_id = C.region_id
ORDER BY R.region_name, C.country_name DESC;



/*
문제5.
자신의 매니저보다 채용일(hire_date)이 빠른 사원의
사번(employee_id), 이름(first_name)과 채용일(hire_date), 매니저이름(first_name), 매니저입
사일(hire_date)을 조회하세요.
(37건)
*/
-- EMP( EMPLOYEE_ID, FIRST_NAME , HIRE_DATE, MANAGER_ID)
-- DEP(  MANAGER_ID )
DESC EMPLOYEES; 
DESC DEPARTMENTS;

SELECT EMP.employee_id AS 사번, 
       EMP.first_name AS 사원이름, 
       EMP.hire_date AS 채용일, 
       MAN.first_name AS 매니저이름, 
       MAN.hire_date AS 매니저입사일
FROM employees EMP 
FULL OUTER JOIN employees MAN ON EMP.manager_id = MAN.employee_id
FULL OUTER JOIN departments DEPT ON EMP.department_id = DEPT.department_id
WHERE EMP.hire_date < MAN.hire_date
ORDER BY 채용일;


/*
문제6.
나라별로 어떠한 부서들이 위치하고 있는지 파악하려고 합니다.
나라명, 나라아이디, 도시명, 도시아이디, 부서명, 부서아이디를 나라명(오름차순)로 정렬하여
출력하세요.
값이 없는 경우 표시하지 않습니다.
(27건)
*/


/*
문제7.
job_history 테이블은 과거의 담당업무의 데이터를 가지고 있다.
과거의 업무아이디(job_id)가 ‘AC_ACCOUNT’로 근무한 사원의 사번, 이름(풀네임), 업무아이
디, 시작일, 종료일을 출력하세요.
이름은 first_name과 last_name을 합쳐 출력합니다.
(2건)
*/


/*
문제8.
각 부서(department)에 대해서 부서번호(department_id), 부서이름(department_name),
매니저(manager)의 이름(first_name), 위치(locations)한 도시(city), 나라(countries)의 이름
(countries_name) 그리고 지역구분(regions)의 이름(resion_name)까지 전부 출력해 보세요.
(11건)
*/


/*
문제9.
각 사원(employee)에 대해서 사번(employee_id), 이름(first_name), 부서명
(department_name), 매니저(manager)의 이름(first_name)을 조회하세요.
부서가 없는 직원(Kimberely)도 표시합니다.
(106명)
*/