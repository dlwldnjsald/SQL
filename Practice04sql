--서브쿼리(SUBQUERY) SQL 문제입니다.

--문제1.평균 급여보다 적은 급여을 받는 직원은 몇명인지 구하시요.(56건)
--1)ALL 사용
SELECT COUNT(salary) 
FROM employees 
WHERE salary < ALL (SELECT AVG(salary) FROM employees);




--문제2. 평균급여 이상, 최대급여 이하의 월급을 받는 사원의 
--직원번호(employee_id), 이름(first_name), 급여(salary), 평균급여, 최대급여를 
--급여의 오름차순으로 정렬하여 출력하세요(51건)

-->TEACHER'S CODE
SELECT EMP.employee_id, EMP.first_name, EMP.salary,
        T. AVGSalary, T. MAXSalary --CORRELATED
FROM employees EMP  
    JOIN (SELECT ROUND(AVG(salary)) AVGSalary, MAX(salary) MAXSalary FROM employees) T --CORRELATED
        ON EMP.salary BETWEEN T. AVGSalary AND T. MAXSalary  --> BETWEEN 함수로 편하게 사용
ORDER BY salary;
-->CORRELATED관계..




-- 문제3. 직원중 Steven(first_name) king(last_name)이 소속된 부서(departments)가 있는 곳의 
--주소를 알아보려고 한다.도시아이디(location_id), 거리명(street_address), 우편번호(postal_code), 
-- 도시명(city), 주(state_province), 나라아이디(country_id) 를 출력하세요
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Steven';

-- 1)STEVEN이 소속된 부서 출력
SELECT d.department_id 부서아이디, d.location_id LOC
FROM employees e ,DEPARTMENTS d
WHERE e.department_id = d.department_id AND e.first_name = 'Steven' AND e.last_name = 'King';

-- 2)LOCATION 과 위의 코드 JOIN
SELECT LOC.location_id 도시아이디 , LOC.street_address 거리명 , LOC.postal_code 우편번호 , 
        LOC.city 도시명 ,LOC.state_province 주, LOC.country_id 나라아이디
FROM locations LOC JOIN 
    (SELECT d.department_id, d.location_id LOC FROM employees e ,DEPARTMENTS d
        WHERE e.department_id = d.department_id 
            AND first_name = 'Steven' AND last_name = 'King') D
ON LOC.location_id = D.LOC;

--3) teacher's code 다른 방법 SUBQUERY로 풀 경우 
SELECT location_id 도시아이디 , street_address 거리명 , postal_code 우편번호 , 
        city 도시명 , state_province 주, country_id 나라아이디 
FROM locations
WHERE location_id = (SELECT location_id FROM departments 
                        WHERE department_id = (SELECT department_id FROM employees
                                                WHERE first_name = 'Steven' AND last_name = 'King'));
                                                  
-- 4) teacher's code join으로 풀 경우
SELECT location_id 도시아이디 , street_address 거리명 , postal_code 우편번호 , 
        city 도시명 , state_province 주, country_id 나라아이디 
FROM locations NATURAL JOIN DEPARTMENTS JOIN EMPLOYEES 
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID 
WHERE FIRST_NAME = 'Steven' AND LAST_NAME = 'King';





-- 문제4.job_id 가 'ST_MAN' 인 직원의 급여보다 작은 직원의 사번,이름,급여를 
--급여의 내림차순으로 출력하세요 -ANY연산자 사용(74건)

--job_id가 'ST_MAN'인 직원의 급여
SELECT salary 급여  
FROM employees WHERE job_id = 'ST_MAN';

-- 이 직원의 급여보다 작은 직원 목록
SELECT job_id 사번, first_name 직원명, salary 급여 
FROM employees 
WHERE salary < ANY(SELECT salary 급여 FROM employees WHERE job_id = 'ST_MAN')
ORDER BY salary DESC;

-- TEACHER'S CODE
SELECT employee_id 사번아이디, first_name 직원명, salary 급여 FROM employees
WHERE salary  < ANY(SELECT salary FROM employees WHERE job_id = 'ST_MAN')
ORDER BY salary DESC;





-- 문제5. 각 부서별로 최고의 급여를 받는 사원의 
--직원번호(employee_id), 이름(first_name)과 급여(salary) 부서번호(department_id)를 조회하세요
--단 조회결과는 급여의 내림차순으로 정렬되어 나타나야 합니다.
--조건절비교, 테이블조인 2가지 방법으로 작성하세요
                
-- TEACHER'S CODE------------------------------
-- 부서별 최고 급여 쿼리 
SELECT MAX(salary), department_id FROM employees
GROUP BY department_id;

--조건절 비교 방식 
SELECT emp.employee_id 직원번호, emp.first_name 이름, emp.salary 급여, emp.department_id 부서번호 
FROM employees emp
WHERE (emp.department_id, emp.salary) IN(SELECT MAX(salary), department_id FROM employees
                                            GROUP BY department_id)
ORDER BY SALARY DESC;

-- table join
SELECT emp.employee_id 직원번호, emp.first_name 이름, emp.salary 급여, emp.department_id 부서번호 
FROM employees emp 
    JOIN (SELECT MAX(salary) salary , department_id FROM employees GROUP BY department_id) T
     ON emp.department_id = T.department_id
WHERE emp.salary = T.salary
ORDER BY emp.salary DESC;




/*
문제6.
각 업무(job) 별로 연봉(salary)의 총합을 구하고자 합니다.
연봉 총합이 가장 높은 업무부터 업무명(job_title)과 연봉 총합을 조회하시오
(19건)
*/
-- teacher's code
SELECT j.job_title, t.SUMSAL , j.job_id , t.job_id 
FROM jobs j JOIN (SELECT job_id, SUM(salary) SUMSAL FROM employees GROUP BY job_id) t
            ON j.job_id = t.job_id 
ORDER BY SUMSAL DESC;




/*
문제7.
자신의 부서 평균 급여보다 월급(salary)이 많은 직원의 직원번호(employee_id), 이름
(first_name)과 급여(salary)을 조회하세요
(38건)
*/
-- teacher's code
SELECT emp.employee_id, emp.first_name, emp.salary 
FROM employees emp JOIN (SELECT department_id, AVG(salary) salary FROM employees
                        GROUP BY department_id ) t
                    ON emp.department_id = t.department_id
WHERE emp.salary > t.salary;




/*
문제8.
직원 입사일이 11번째에서 15번째의 직원의 
사번, 이름, 급여, 입사일을 입사일 순서로 출력하세요
*/
-- teacher's code
-- 1)직원 입사일 ORDERBY 해서 먼저 정렬 필요 
SELECT employee_id, first_name, salary, hire_date FROM employees 
ORDER BY HIRE_DATE;
--2) 위 코드를 ROWNUM 으로 정렬해주고 위 코드를 서브 쿼리로 묶어주기 
SELECT rownum RN, employee_id, first_name, salary, hire_date 
    FROM (SELECT employee_id, first_name, salary, hire_date FROM employees ORDER BY HIRE_DATE);
--3) 조건 부여하기 
SELECT employee_id, first_name, salary, hire_date
FROM (SELECT rownum RN, employee_id, first_name, salary, hire_date 
    FROM (SELECT employee_id, first_name, salary, hire_date FROM employees ORDER BY HIRE_DATE))
WHERE RN >= 11 AND RN <= 15;

-- row_number 함수 사용 
-- 1)row num 사용해서 먼저 정렬해주기
SELECT ROW_NUMBER() OVER (ORDER BY hire_date) rnum,
        employee_id, first_name, salary, hire_date FROM employees;
-- 2)위 코드를 서브쿼리로 해서 컬럼 출력 및 조건 추가        
SELECT rnum , employee_id, first_name, salary, hire_date 
FROM (SELECT ROW_NUMBER() OVER (ORDER BY hire_date) rnum,
        employee_id, first_name, salary, hire_date FROM employees)
WHERE rnum >= 11 AND rnum <= 15;

-- rank 함수 사용
-- 1)rank()함수 사용해서 먼저 정렬해주기
SELECT RANK() OVER (ORDER BY hire_date ASC) rank,
        employee_id, first_name, salary, hire_date FROM employees;
-- 2)위 코드를 서브쿼리로 해서 컬럼 출력 및 조건 추가        
SELECT rank, employee_id, first_name, salary, hire_date
FROM (SELECT RANK() OVER (ORDER BY hire_date ASC) rank,
        employee_id, first_name, salary, hire_date FROM employees) 
WHERE rank BETWEEN 11 AND 15;
            






